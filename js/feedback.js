// Generated by CoffeeScript 1.10.0
(function() {
  var Feedback,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Feedback = (function() {
    Feedback.prototype.tabletop = void 0;

    function Feedback(options) {
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      this.changeStep = bind(this.changeStep, this);
      this.submit = bind(this.submit, this);
      this.reset = bind(this.reset, this);
      this.checkLength = bind(this.checkLength, this);
      this.zoomEnable = bind(this.zoomEnable, this);
      this.zoomDisable = bind(this.zoomDisable, this);
      var local;
      this.el = $("#feedback");
      this.el.html(feedback_form);
      this.toggle_el = $("#feedback #feedback-toggle");
      this.form_el = $("#feedback-form");
      this.txt_el = this.form_el.find("textarea");
      this.open_el = this.toggle_el.find("a.open");
      this.close_el = this.toggle_el.find("a.close");
      this.submit_el = this.el.find("#feedback-send");
      this.counter_el = this.el.find("#feedback-counter");
      this.wait_el = this.el.find("#feedback-wait");
      this.txt_el.val(this.txt_el.data("placeholder"));
      this.open_el.click(this.open);
      this.close_el.click(this.close);
      this.el.find("#feedback-close").click(this.close);
      this.submit_el.click(this.submit);
      local = this;
      this.wait_el.append(this._spinner().el);
      this.txt_el.focus(function() {
        var t;
        t = $(this);
        if (t.val() === t.data("placeholder") || t.val() === t.data("error")) {
          t.removeClass("error");
          return t.val("");
        }
      });
      this.txt_el.blur(function() {
        var t;
        t = $(this);
        if (t.val() === "") {
          return local.reset();
        }
      });
      this.txt_el.keyup(this.checkLength);
      $(document).mouseup((function(_this) {
        return function(e) {
          if (_this.el.has(e.target).length === 0) {
            return _this.close();
          }
        };
      })(this));
      window.setTimeout((function(_this) {
        return function() {
          return _this.el.removeClass("preload");
        };
      })(this), 5000);
      $("input[type=text], textarea").focus(this.zoomDisable).blur(this.zoomEnable);
      this;
    }

    Feedback.prototype.zoomDisable = function() {
      $('head meta[name=viewport]').remove();
      return $('head').prepend('<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0" />');
    };

    Feedback.prototype.zoomEnable = function() {
      $('head meta[name=viewport]').remove();
      return $('head').prepend('<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1" />');
    };

    Feedback.prototype.checkLength = function() {
      var len, remaining, txt;
      len = parseInt(this.txt_el.attr("maxlength"), 10);
      txt = this.txt_el.val();
      if (len - txt.length > 0) {
        remaining = len - txt.length;
      } else {
        remaining = 0;
      }
      this.counter_el.text(remaining);
      if (txt > len) {
        this.txt_el.val(txt.substr(0, len));
        return false;
      }
    };

    Feedback.prototype._spinner = function() {
      var opts;
      opts = {
        lines: 11,
        length: 0,
        width: 4,
        radius: 8,
        corners: 1,
        rotate: 0,
        color: '#fff',
        speed: 1,
        trail: 60,
        shadow: false,
        hwaccel: false,
        className: 'spinner',
        zIndex: 9,
        top: 'auto',
        left: 'auto'
      };
      return new Spinner(opts).spin();
    };

    Feedback.prototype.reset = function() {
      this.txt_el.val(this.txt_el.data("placeholder"));
      this.txt_el.removeClass("error");
      this.counter_el.text(this.txt_el.attr("maxlength"));
      this.el.find(".step1").show();
      this.el.find(".step2").hide();
      return this.el.find("#feedback-1").prop('checked', true);
    };

    Feedback.prototype.submit = function(e) {
      var form, msg;
      msg = this.txt_el.val().trim();
      form = document.forms[1];
      if (msg === this.txt_el.data("placeholder") || msg === this.txt_el.data("error")) {
        this.txt_el.addClass("error");
        return this.txt_el.val(this.txt_el.data("error"));
      } else {
        this.wait_el.show();
        this.form_el.attr('action', 'http://picfeedback.herokuapp.com/save');
        this.form_el.submit((function(_this) {
          return function(e) {
            e.preventDefault();
            form = $(e.target);
            return $.getJSON(form.attr("action") + '.json', {
              frompage: document.location.href,
              feedback_text: msg,
              feedback_id: form.feedback_id.value,
              type: form.type.value
            }, function(data) {
              return _this.changeStep();
            }).done(function() {
              return _this.changeStep();
            });
          };
        })(this));
        return this.form_el.trigger('submit');
      }
    };

    Feedback.prototype.changeStep = function(e) {
      this.el.find(".step1").hide();
      this.el.find(".step2").show();
      return this.wait_el.hide();
    };

    Feedback.prototype.open = function(e) {
      this.el.addClass("open");
      this.toggle_el.find("a.open").removeClass("visible");
      return this.close_el.addClass("visible");
    };

    Feedback.prototype.close = function() {
      this.el.removeClass("open");
      this.close_el.removeClass("visible");
      this.toggle_el.find("a.open").addClass("visible");
      return this.reset();
    };

    return Feedback;

  })();

  $(function() {
    return window._fb = new Feedback();
  });

}).call(this);
